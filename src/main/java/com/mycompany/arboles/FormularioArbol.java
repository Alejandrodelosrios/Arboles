/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.arboles;

import Excepciones.OrdenInvalidoException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author EQUIPO
 */
public class FormularioArbol extends javax.swing.JFrame {
       IArbolBusqueda<Integer,String> ia;
         // ArbolB<Integer,String>ia;
    /**
     * Creates new form FormularioArbol
     * @throws Excepciones.OrdenInvalidoException
     */
    public FormularioArbol() throws OrdenInvalidoException {
        initComponents(); 
        //ia=new ArbolMviasBusqueda<>(3);
          ia=new ArbolB<>(5);
       //ia=new ArbolBinarioBusqueda<>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        txtElemento = new javax.swing.JTextField();
        tbInsertar = new javax.swing.JButton();
        tbRecorridoPorNivel = new javax.swing.JButton();
        txtElemento1 = new javax.swing.JTextField();
        tbRecorridoEnPreOrden = new javax.swing.JButton();
        tbRecorridoEnInOrden = new javax.swing.JButton();
        tbRecorridoEnPostOrden = new javax.swing.JButton();
        tbSize = new javax.swing.JButton();
        tbNivel = new javax.swing.JButton();
        tbAltura = new javax.swing.JButton();
        tbBuscar = new javax.swing.JButton();
        tbContiene = new javax.swing.JButton();
        TBimprimir = new javax.swing.JButton();
        TBcontadorDeNodosDe2Hijos = new javax.swing.JButton();
        TBcantidadDeHijosVacios = new javax.swing.JButton();
        TBeliminar = new javax.swing.JButton();
        TBestanBalanceado = new javax.swing.JButton();
        TBarbolMvias = new javax.swing.JButton();
        TBestaBalanaceadoApartirDeUnNivel = new javax.swing.JButton();
        TBeliminarIterativo = new javax.swing.JButton();
        TBejercicio1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        textArea.setColumns(20);
        textArea.setRows(5);
        jScrollPane1.setViewportView(textArea);

        txtElemento.setText("claves");

        tbInsertar.setText("insertar");
        tbInsertar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbInsertarActionPerformed(evt);
            }
        });

        tbRecorridoPorNivel.setText("recorridoPorNivel");
        tbRecorridoPorNivel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbRecorridoPorNivelActionPerformed(evt);
            }
        });

        txtElemento1.setText("valor");

        tbRecorridoEnPreOrden.setText("recorridoEnPreOrden");
        tbRecorridoEnPreOrden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbRecorridoEnPreOrdenActionPerformed(evt);
            }
        });

        tbRecorridoEnInOrden.setText("recorridoEnInOrden");
        tbRecorridoEnInOrden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbRecorridoEnInOrdenActionPerformed(evt);
            }
        });

        tbRecorridoEnPostOrden.setText("recorridoEnPostOrden");
        tbRecorridoEnPostOrden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbRecorridoEnPostOrdenActionPerformed(evt);
            }
        });

        tbSize.setText("size");
        tbSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbSizeActionPerformed(evt);
            }
        });

        tbNivel.setText("nivel");
        tbNivel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbNivelActionPerformed(evt);
            }
        });

        tbAltura.setText("altura");
        tbAltura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbAlturaActionPerformed(evt);
            }
        });

        tbBuscar.setText("buscar");
        tbBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbBuscarActionPerformed(evt);
            }
        });

        tbContiene.setText("contiene");
        tbContiene.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbContieneActionPerformed(evt);
            }
        });

        TBimprimir.setText("imprimir");
        TBimprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TBimprimirActionPerformed(evt);
            }
        });

        TBcontadorDeNodosDe2Hijos.setText("contar si tienen 2 hijos");
        TBcontadorDeNodosDe2Hijos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TBcontadorDeNodosDe2HijosActionPerformed(evt);
            }
        });

        TBcantidadDeHijosVacios.setText("cantidad de hijos vacios");
        TBcantidadDeHijosVacios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TBcantidadDeHijosVaciosActionPerformed(evt);
            }
        });

        TBeliminar.setText("eliminar");
        TBeliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TBeliminarActionPerformed(evt);
            }
        });

        TBestanBalanceado.setText("estaBalanceado");
        TBestanBalanceado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TBestanBalanceadoActionPerformed(evt);
            }
        });

        TBarbolMvias.setText("Arbol MVias");
        TBarbolMvias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TBarbolMviasActionPerformed(evt);
            }
        });

        TBestaBalanaceadoApartirDeUnNivel.setText("estaBalanceadoDesdeUnNivel");
        TBestaBalanaceadoApartirDeUnNivel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TBestaBalanaceadoApartirDeUnNivelActionPerformed(evt);
            }
        });

        TBeliminarIterativo.setText("eliminarIterativo");
        TBeliminarIterativo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TBeliminarIterativoActionPerformed(evt);
            }
        });

        TBejercicio1.setText("ejercicio1");
        TBejercicio1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TBejercicio1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(txtElemento, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtElemento1, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(tbInsertar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(TBeliminar))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(TBarbolMvias)
                            .addComponent(TBestaBalanaceadoApartirDeUnNivel)
                            .addComponent(TBeliminarIterativo)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tbRecorridoPorNivel)
                                .addGap(18, 18, 18)
                                .addComponent(tbRecorridoEnPreOrden)
                                .addGap(18, 18, 18)
                                .addComponent(tbSize)
                                .addGap(26, 26, 26)
                                .addComponent(TBejercicio1))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tbRecorridoEnInOrden)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tbRecorridoEnPostOrden)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(tbNivel))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tbAltura)
                                .addGap(18, 18, 18)
                                .addComponent(tbBuscar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(tbContiene)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(TBimprimir))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(TBcontadorDeNodosDe2Hijos)
                        .addGap(18, 18, 18)
                        .addComponent(TBcantidadDeHijosVacios)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TBestanBalanceado)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtElemento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tbInsertar)
                    .addComponent(txtElemento1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TBeliminar))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(TBarbolMvias)
                        .addGap(18, 18, 18)
                        .addComponent(TBestaBalanaceadoApartirDeUnNivel)
                        .addGap(18, 18, 18)
                        .addComponent(TBeliminarIterativo)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tbRecorridoPorNivel)
                    .addComponent(tbRecorridoEnPreOrden)
                    .addComponent(tbSize)
                    .addComponent(TBejercicio1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tbRecorridoEnInOrden)
                    .addComponent(tbRecorridoEnPostOrden)
                    .addComponent(tbNivel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tbAltura)
                    .addComponent(tbBuscar)
                    .addComponent(tbContiene)
                    .addComponent(TBimprimir))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TBcontadorDeNodosDe2Hijos)
                    .addComponent(TBcantidadDeHijosVacios)
                    .addComponent(TBestanBalanceado))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tbInsertarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbInsertarActionPerformed
   try{
        int x=Integer.parseInt(txtElemento.getText());
        String s=txtElemento1.getText();
        ia.insertar(x,s);
    }catch(NumberFormatException e){
      JOptionPane.showMessageDialog(null,"clave invalida");
    }
        // TODO add your handling code here:
    }//GEN-LAST:event_tbInsertarActionPerformed

    private void tbRecorridoPorNivelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbRecorridoPorNivelActionPerformed
    List<Integer> lista=ia.recorridoPorNiveles();
    textArea.append(lista.toString());
        // TODO add your handling code here:
    }//GEN-LAST:event_tbRecorridoPorNivelActionPerformed

    private void tbRecorridoEnPreOrdenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbRecorridoEnPreOrdenActionPerformed
     List<Integer> lista=ia.recorridoEnPreOrden();
     textArea.append(lista.toString());
        // TODO add your handling code here:
    }//GEN-LAST:event_tbRecorridoEnPreOrdenActionPerformed

    private void tbRecorridoEnInOrdenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbRecorridoEnInOrdenActionPerformed
     List<Integer> lista=ia.recorridoEnInOrden();
     textArea.append(lista.toString());
        // TODO add your handling code here:
    }//GEN-LAST:event_tbRecorridoEnInOrdenActionPerformed

    private void tbRecorridoEnPostOrdenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbRecorridoEnPostOrdenActionPerformed
     List<Integer> lista=ia.recorridoEnPostOrden();
     textArea.append(lista.toString());
        // TODO add your handling code here:
    }//GEN-LAST:event_tbRecorridoEnPostOrdenActionPerformed

    private void tbSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbSizeActionPerformed
   JOptionPane.showMessageDialog(null,"el size del arbol es de: "+ia.size());
        // TODO add your handling code here:
    }//GEN-LAST:event_tbSizeActionPerformed

    private void tbNivelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbNivelActionPerformed
    JOptionPane.showMessageDialog(null,"el nivel del arbol es: "+ia.nivel());
    // TODO add your handling code here:
    }//GEN-LAST:event_tbNivelActionPerformed

    private void tbAlturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbAlturaActionPerformed
    JOptionPane.showMessageDialog(null,"la altura del arbol es: "+ia.altura());
        // TODO add your handling code here:
    }//GEN-LAST:event_tbAlturaActionPerformed

    private void tbBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbBuscarActionPerformed
    int clave=Integer.parseInt(JOptionPane.showInputDialog("ingrese la clave que desea buscar"));
    JOptionPane.showMessageDialog(null,"el valor de la clave "+clave+" es: "+ia.buscar(clave));
        // TODO add your handling code here:
    }//GEN-LAST:event_tbBuscarActionPerformed

    private void tbContieneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbContieneActionPerformed
    int clave=Integer.parseInt(JOptionPane.showInputDialog("ingrese la clave para verificar si esta en el arbol"));
    if(ia.contiene(clave)){
     JOptionPane.showMessageDialog(null,"la clave "+clave+" esta en el arbol y su valor es: "+ia.buscar(clave));
    }else{
     JOptionPane.showMessageDialog(null,"la clave "+clave+" no esta en el arbol");   
    }  
        // TODO add your handling code here:
    }//GEN-LAST:event_tbContieneActionPerformed

    private void TBimprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TBimprimirActionPerformed
//    ia.imprimir(textArea);
        // TODO add your handling code here:
    }//GEN-LAST:event_TBimprimirActionPerformed

    private void TBcontadorDeNodosDe2HijosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TBcontadorDeNodosDe2HijosActionPerformed
   //  JOptionPane.showMessageDialog(null,"la cantidad de nodos que tienen dos hijos es: "+ia.cantidadDeNodosDeDosHijos());
        // TODO add your handling code here:
    }//GEN-LAST:event_TBcontadorDeNodosDe2HijosActionPerformed

    private void TBcantidadDeHijosVaciosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TBcantidadDeHijosVaciosActionPerformed
 //    JOptionPane.showMessageDialog(null,"la cantidad de nodos vacios en el arbol es de: "+ia.cantidadDeHijosVacios());
        // TODO add your handling code here:
    }//GEN-LAST:event_TBcantidadDeHijosVaciosActionPerformed

    private void TBeliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TBeliminarActionPerformed
    int clave=Integer.parseInt(JOptionPane.showInputDialog("ingrese la clave para eliminar del arbol"));
     String valor=ia.eliminar(clave);/*
    JOptionPane.showMessageDialog(null,"se elimino la clave: "+clave+" y el valor: "+valor);
        // TODO add your handling code here:
    }//GEN-LAST:event_TBeliminarActionPerformed

    private void TBestanBalanceadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TBestanBalanceadoActionPerformed
//     if(ia.estaBalanceado()){
        JOptionPane.showMessageDialog(null,"el arbol esta balanceado");
//     }else{
        JOptionPane.showMessageDialog(null,"el arbol no esta balanceado"); 
  //   }
        // TODO add your handling code here:
    }//GEN-LAST:event_TBestanBalanceadoActionPerformed

    private void TBarbolMviasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TBarbolMviasActionPerformed
    JOptionPane.showMessageDialog(null,"arboles disponibles : ABB,AVL,AMB");
           try {
               ia=new ArbolMviasBusqueda<>(5);
           } catch (OrdenInvalidoException ex) {
               Logger.getLogger(FormularioArbol.class.getName()).log(Level.SEVERE, null, ex);
           }
    }//GEN-LAST:event_TBarbolMviasActionPerformed

    private void TBestaBalanaceadoApartirDeUnNivelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TBestaBalanaceadoApartirDeUnNivelActionPerformed
    int x=Integer.parseInt(JOptionPane.showInputDialog("a partir de que "
            + "nivel quiere verificar si esta balanaceado"));
    //    if(ia.estaBalanceadoApartirDeUnNivel(x)){
        JOptionPane.showMessageDialog(null,"esta balanaceado apartir del nivel:"+x);
    //    }else{
        JOptionPane.showMessageDialog(null,"no esta balanaceado apartir del nivel:"+x);
    //    }        
// TODO add your handling code here:
    }//GEN-LAST:event_TBestaBalanaceadoApartirDeUnNivelActionPerformed

    private void TBeliminarIterativoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TBeliminarIterativoActionPerformed
  //        int clave=Integer.parseInt(JOptionPane.showInputDialog("ingrese la clave para eliminar del arbol"));
    // String valor=ia.eliminarIterativo(clave);
  //       JOptionPane.showMessageDialog(null,"se elimino la clave: "+clave+" y el valor: "+valor);    
        // TODO add your handling code here:
    }//GEN-LAST:event_TBeliminarIterativoActionPerformed

    private void TBejercicio1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TBejercicio1ActionPerformed
    int nivel=Integer.parseInt(JOptionPane.showInputDialog("ingrese hasta que nivel contara los hijos no vacios"));
    int x=ia.cantidadDeHijosNoVaciosHastaUnNivel(nivel);
    JOptionPane.showMessageDialog(null,"la cantidad de hijos no vacios es de: "+x);
        // TODO add your handling code here:
    }//GEN-LAST:event_TBejercicio1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormularioArbol.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormularioArbol.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormularioArbol.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormularioArbol.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new FormularioArbol().setVisible(true);
                } catch (OrdenInvalidoException ex) {
                    Logger.getLogger(FormularioArbol.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton TBarbolMvias;
    private javax.swing.JButton TBcantidadDeHijosVacios;
    private javax.swing.JButton TBcontadorDeNodosDe2Hijos;
    private javax.swing.JButton TBejercicio1;
    private javax.swing.JButton TBeliminar;
    private javax.swing.JButton TBeliminarIterativo;
    private javax.swing.JButton TBestaBalanaceadoApartirDeUnNivel;
    private javax.swing.JButton TBestanBalanceado;
    private javax.swing.JButton TBimprimir;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton tbAltura;
    private javax.swing.JButton tbBuscar;
    private javax.swing.JButton tbContiene;
    private javax.swing.JButton tbInsertar;
    private javax.swing.JButton tbNivel;
    private javax.swing.JButton tbRecorridoEnInOrden;
    private javax.swing.JButton tbRecorridoEnPostOrden;
    private javax.swing.JButton tbRecorridoEnPreOrden;
    private javax.swing.JButton tbRecorridoPorNivel;
    private javax.swing.JButton tbSize;
    private javax.swing.JTextArea textArea;
    private javax.swing.JTextField txtElemento;
    private javax.swing.JTextField txtElemento1;
    // End of variables declaration//GEN-END:variables
}
